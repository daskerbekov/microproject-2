#include "pthread.h"
#include <iostream>
using namespace std;

size_t n;
size_t H;
size_t fullness;
pthread_t* bees;
pthread_mutex_t beerlock;
pthread_mutex_t bearlock;

size_t iterations;

int getNumber(int left, int right)
{
    int temp;
    while (true)
    {
        cout << "Choose the number [" << left << " ; " << right << "]" << endl;
        cin >> temp;
        if (temp <left || temp > right)
            continue;
        else
            break;
    }

    return temp;
}

void* fillinPot(void* param)
{
    int bnum = *((int*)param);
    while (true)
    {

        if (iterations >= UINT16_MAX)
        {
            pthread_mutex_unlock(&beerlock);
            pthread_mutex_unlock(&bearlock);
            return NULL;
        }
        fullness++;
        cout << "Bee number " << bnum << " filled pot and now it contains " << fullness << " lips" << endl;

        if (fullness == H)
        {
           cout << "Bee number " << bnum << " calls Bear" << endl;

            continue;
        }
        iterations++;
        cout << "Other bees can get access " << endl;


    }
}

void* drinkPot()
{
    while (true)
    {

        if (iterations >= UINT16_MAX)
        {
            pthread_mutex_unlock(&beerlock);
            return NULL;
        }
        cout << "Bear has drunk " << fullness << " lips of honey" << endl;
        fullness = 0;
        iterations++;
        cout << "Other bees can get access to fill the pot" << endl;

    }
}


int main()
{
    cout << "size of the bees " << endl;
    n = getNumber(1, 1000);
    cout << "size of the pot" << endl;
    H = getNumber(1,1000);

    pthread_mutex_init(&beerlock, NULL);
    pthread_mutex_init(&bearlock, NULL);

    bees = new pthread_t[n];
    fullness = 0;

    int* bs = new int[n];
    for (size_t i = 0; i < n; i++)
    {
        bs[i] = i + 1;
        pthread_create(&bees[i], NULL, fillinPot, (void*)(bs+i));
    }

    pthread_mutex_lock(&bearlock);
    drinkPot();


    delete[] bs;
    delete[] bees;
    return 0;

}
